#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

struct header {
    uint64_t size;
    struct header *next;
    int id;
};

void initialize_block(struct header *block, uint64_t size, struct header *next, int id) {
    block->size = size;
    block->next = next;
    block->id = id;
}

int find_first_fit(struct header *free_list_ptr, uint64_t size) {
    struct header *current = free_list_ptr;
    while (current != NULL) {
        if (current->size >= size) {
            return current->id;
        }
        current = current->next;
    }
    return -1; 
}

int find_best_fit(struct header *free_list_ptr, uint64_t size) {
    struct header *current = free_list_ptr;
    int best_fit_id = -1;
    uint64_t smallest_size = UINT64_MAX;

    while (current != NULL) {
        if (current->size >= size && current->size < smallest_size) {
            smallest_size = current->size;
            best_fit_id = current->id;
        }
        current = current->next;
    }
    return best_fit_id;
}

int find_worst_fit(struct header *free_list_ptr, uint64_t size) {
    struct header *current = free_list_ptr;
    int worst_fit_id = -1;
    uint64_t largest_size = 0;

    while (current != NULL) {
        if (current->size >= size && current->size > largest_size) {
            largest_size = current->size;
            worst_fit_id = current->id;
        }
        current = current->next;
    }
    return worst_fit_id;
}

int main(void) {
    struct header *free_block1 = (struct header*) malloc(sizeof(struct header));
    struct header *free_block2 = (struct header*) malloc(sizeof(struct header));
    struct header *free_block3 = (struct header*) malloc(sizeof(struct header));
    struct header *free_block4 = (struct header*) malloc(sizeof(struct header));
    struct header *free_block5 = (struct header*) malloc(sizeof(struct header));

    initialize_block(free_block1, 6, free_block2, 1);
    initialize_block(free_block2, 12, free_block3, 2);
    initialize_block(free_block3, 24, free_block4, 3);
    initialize_block(free_block4, 8, free_block5, 4);
    initialize_block(free_block5, 4, NULL, 5);

    struct header *free_list_ptr = free_block1;

    int first_fit_id = find_first_fit(free_list_ptr, 7);
    int best_fit_id = find_best_fit(free_list_ptr, 7);
    int worst_fit_id = find_worst_fit(free_list_ptr, 7);

    printf("The ID for First-Fit algorithm is: %d\n", first_fit_id);
    printf("The ID for Best-Fit algorithm is: %d\n", best_fit_id);
    printf("The ID for Worst-Fit algorithm is: %d\n", worst_fit_id);

    free(free_block1);
    free(free_block2);
    free(free_block3);
    free(free_block4);
    free(free_block5);

    return 0;
}

/*
Algorithm: Coalesce a newly freed block with contiguous free blocks

Inputs: 
    NewBlock  - the block that was just freed
    FreeList  - the head of the linked list of free blocks

Steps:

1. Set up pointers:
    prev = NULL
    current = FreeList

2. Find the correct place to insert the new block in the free list:
    while current is not NULL and current comes before NewBlock in memory:
        prev = current
        current = current->next

3. Check if the previous block is adjacent to the new block:
    if prev is not NULL and the end of prev touches the start of NewBlock:
        merge NewBlock into prev by increasing prev's size
        set NewBlock = prev  // now the merged block is treated as NewBlock

4. Check if the next block is adjacent to the new block:
    if current is not NULL and the start of current touches the end of NewBlock:
        merge current into NewBlock by increasing NewBlock's size
        set NewBlock->next = current->next
    else:
        set NewBlock->next = current

5. Update the head of the free list if necessary:
    if prev is NULL:
        FreeList = NewBlock

This ensures that any contiguous free blocks are merged into a single larger block,
reducing fragmentation in memory.
*/

